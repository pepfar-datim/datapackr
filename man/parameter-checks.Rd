% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/check_params.R
\name{parameter-checks}
\alias{parameter-checks}
\alias{check_country_uids}
\alias{check_PSNUs}
\alias{check_cop_year}
\alias{check_tool}
\alias{check_season}
\alias{check_schema}
\alias{checkDataPackName}
\alias{checkTemplatePath}
\alias{checkWB}
\alias{checkOutputFolder}
\alias{checkResultsArchive}
\alias{checkSheets}
\alias{check_params}
\title{Standardized Parameter Defaults}
\usage{
check_country_uids(country_uids, cop_year, force = TRUE)

check_PSNUs(PSNUs = NULL, country_uids = NULL, cop_year = NULL)

check_cop_year(cop_year, tool)

check_tool(tool, season, cop_year)

check_season(season, tool)

check_schema(schema, cop_year, tool, season)

checkDataPackName(datapack_name, country_uids, cop_year)

checkTemplatePath(template_path, cop_year, tool, season)

checkWB(
  wb = NULL,
  country_uids = NULL,
  cop_year = NULL,
  tool = NULL,
  datapack_name = NULL,
  template_path = NULL
)

checkOutputFolder(output_folder = NULL)

checkResultsArchive(results_archive = FALSE)

checkSheets(
  sheets,
  cop_year,
  tool,
  all_sheets = FALSE,
  operation = "schema",
  psnuxim = FALSE
)

check_params(
  country_uids,
  PSNUs,
  cop_year,
  tool,
  season,
  schema,
  datapack_name,
  template_path,
  wb,
  model_data,
  snuxim_model_data,
  output_folder,
  results_archive,
  sheets,
  ...
)
}
\arguments{
\item{country_uids}{Unique IDs for countries to include in the Data Pack.
For full list of these IDs, see \code{datapackr::valid_OrgUnits}.}

\item{cop_year}{COP Year to use for tailoring functions. Remember,
FY22 targets = COP21.}

\item{force}{logical. Should country_uids be required?}

\item{PSNUs}{Dataframe of PSNUs to use in this function, containing at least
\code{psnu_uid}.}

\item{tool}{Type of tool this function will create or interact with. Either
\code{OPU Data Pack} or \code{Data Pack}}

\item{season}{Either \code{COP} or \code{OPU}.}

\item{schema}{Which datapackr schema to use in guiding this function. If left
\code{NULL} will select the default based on \code{cop_year} and \code{tool}.}

\item{datapack_name}{Name you would like associated with this Data Pack.
(Example: "Western Hemisphere", or "Caribbean Region", or "Kenya".)}

\item{template_path}{Local filepath to Data Pack template Excel (XLSX) file.
This file MUST NOT have any data validation formats present. If left
\code{NULL}, will select the default based on \code{cop_year} and \code{tool}.}

\item{wb}{Openxlsx workbook object.}

\item{output_folder}{Local folder where you would like your Data Pack to be
saved upon export.}

\item{results_archive}{If TRUE, will export compiled results of all tests and
processes to output_folder.}

\item{all_sheets}{Logical. Return/check against all sheets (as opposed to only
those with targets)?}

\item{operation}{String. Options = "unpack", "pack", "schema", or "other".}

\item{psnuxim}{Logical. Return/check against PSNUxIM tab as well?}

\item{model_data}{Data from DATIM needed to pack into a COP Data Pack.}

\item{snuxim_model_data}{Export from DATIM needed to allocate data across
mechanisms in the PSNUxIM tab.}

\item{...}{Additional arguments to pass.}
}
\value{
For lower-level functions, a valid function parameter value/object. For the
higher-level \code{check_params}, a list object containing one valid parameter
value/object for each non-missing parameter supplied.
\itemize{
\item \code{check_country_uids}: List of \code{country_uids}.
\item \code{check_PSNUs}: Dataframe of valid \code{PSNUs} (uid and names).
\item \code{check_cop_year}: Valid \code{cop_year} as numeric value.
\item \code{check_tool}: Valid \code{tool} type as string.
\item \code{check_season}: Valid \code{season} as string.
\item \code{check_schema}: Valid \code{schema} as dataframe.
\item \code{checkDataPackName}: Valid \code{datapack_name} as string.
\item \code{checkTemplatePath}: Valid \code{template_path} as string.
\item \code{checkWB}: Valid Data Pack shell for specified \code{cop_year} and \code{tool} type.
\item \code{checkOutputFolder}: Valid \code{output_folder} as string.
\item \code{checkResultsArchive}: Valid \code{results_archive} as \code{.rds} list object,
equivalent to the \code{d} object used throughout this package.
\item \code{check_params}: List object containing one valid parameter value/object for
each non-missing parameter supplied.
}
}
\description{
Standardized package functions,in terms of parameter defaults
and checks.
These can be run individually (e.g., \code{check_country_uids}), or in bulk (e.g.,
\code{check_params(country_uids = "abcdefgh123", tool = "Data Pack")}).
}
\section{Defining Parameter Defaults}{

As much as possible throughout this package, we have adhered to the principle
outlined in the Tidyverse Design Guide regarding parameter defaults for
functions: "Default values should be short and sweet. This makes the function
specification easier to scan."

Where feasible, we have used the common approach of using \code{NULL} as the
parameter default. In many cases, we set this in the function parameter
definition upfront, and then calculate the default only when this value is
unsupplied or otherwise left \code{NULL}. The virtue of this approach is that not
supplying this value at all still supplies \code{NULL} to the  function's internal
logic without a \code{missing} error. In many cases, we use the following custom
function to make this simpler and cleaner:

\if{html}{\out{<div class="sourceCode">}}\preformatted{`\%||\%` <- function(x, y) if (is.null(x)) y else x
}\if{html}{\out{</div>}}

For example:

\if{html}{\out{<div class="sourceCode">}}\preformatted{example_function <- function(arg1 = NULL) \{
  arg2 <- arg1 \%||\% 10
  arg2 + 10
\}

example_function()
20
}\if{html}{\out{</div>}}

However, in some cases within this package, \code{NULL} is an equally valid value
that could be passed to a parameter from a higher-level function. To
distinguish these from truly missing values, we have in some places left the
default undefined in the function parameter and employed the following custom
function:

\if{html}{\out{<div class="sourceCode">}}\preformatted{`\%missing\%` <- function(x, y = NULL) rlang::maybe_missing(x, y)
}\if{html}{\out{</div>}}

For example:

\if{html}{\out{<div class="sourceCode">}}\preformatted{example_function2 <- function(arg1) \{
  arg1 <- arg1 \%missing\% NULL
  arg2 <- arg1 \%||\% 10
  arg2 + 10
\}
}\if{html}{\out{</div>}}

This function allows the following to return equivalent values without
\code{missing} errors:

\if{html}{\out{<div class="sourceCode">}}\preformatted{test_arg <- rlang::missing_arg()
test_arg2 <- NULL
example_function2()
20

example_function2(test_arg)
20

example_function2(test_arg2)
20
}\if{html}{\out{</div>}}

Similarly, when nested within a higher-level function, this approach also
accommodates scenarios where \code{missing} or \code{NULL} values may be meaningful:

\if{html}{\out{<div class="sourceCode">}}\preformatted{example_function3 <- function(arg1, arg2) \{
  example_function2(arg1)
\}

example_function3(arg1 = test_arg, arg2 = 3)
20

example_function3(arg1 = test_arg2, arg2 = 3)
20
}\if{html}{\out{</div>}}

So, within this package, we alternatively use \verb{\%||\%} and \verb{\%missing\%} to
determine default parameters based on the situation and package usage.

Because of the sometimes complicated manner in determining default parameters,
which can often change from year to year, we have attempted to centralize and
standardize how all parameters are validated and how default parameters are
determined here within this function.
}

\seealso{
Other parameter-helpers: 
\code{\link{datapackr_params}()}
}
\concept{parameter-helpers}
